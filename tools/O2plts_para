# !/bin/sh
# ======================================== O2plts
#  
#  Create plt file from file generated by the 
#  O2 Tecplot Writer 
#  
#     version : v 1.0
#  
#  run make_plt with -h option to see all the 
#  available options
#  
# ===============================================                    



# To do list:
# 
# 

function version ()
{
 vers='1.0'
 echo 
# echo '======================'
# echo '   O2plts  v.'$vers
# echo '======================'
 echo 
 echo '  ▄▄  ▄▄     ▝▜   ▗       '
 echo ' ▗▘▝▖▝ ▝▌▗▄▖  ▐  ▗▟▄  ▄▖  '
 echo ' ▐  ▌  ▗▘▐▘▜  ▐   ▐  ▐ ▝  '
 echo ' ▐  ▌ ▗▘ ▐ ▐  ▐   ▐   ▀▚  '
 echo '  ▙▟ ▗▙▄▖▐▙▛  ▝▄  ▝▄ ▝▄▞  '
 echo '         ▐                '
 echo '         ▝                '
 echo '                 v.'$vers  
 echo 
}

function helpme ()
{
  version
  echo ' The O2plts script creates a single binary tecplot file    '
  echo ' or multiple binaries from O2 Tecplot files                '
  echo ' In the case of a single ascii file the script just calls  '
  echo ' preplot, if multiple ascii files ware created in serial   '
  echo ' then it creates the binary files and creates a file called'
  echo ' catlist that can be used with tecplot in order to load the'
  echo ' zones required. If ASCII file were generated in parallel, '
  echo ' the files are first merged into a single file and a single'
  echo ' binary file is generated by tecplot.                      '
  echo ' If the O2 Tecplot writter was in binary mode then it just '
  echo ' merges the parts of the binary.                           '
  options
  echo ' > Exit statuses :                                           '
  echo '     0 : complete succefully                               '
  echo '    -1 : help called                                       '
  echo '    10 : preplot not found in path                         '
  echo '     2 : no filenames were found begining with stem        '
  echo '   225 : invalid option(s)                                 '
  echo 
}

function options () 
{
  echo 
  echo ' > Available options :                                      '
  echo 
  echo '   1. General Options:                                      '
  echo '    -h : informative message                                '
  echo '    -O : overwrite mode                                     '
  echo '    -p : set path of preplot                                '
  echo '    -v : report the file lists obtained                     '
  echo '    -V : version                                            '
  echo '    -c : remove files after using them                      '
  echo 
  echo '   2. Main Inputs                                           '
  echo '    -s : set the stem of the filenames that will be used    '
  echo '    -f : set the stem of the filename(s) of the resulting   '
  echo '         plt(s)                                             '
  echo 
  echo '   3. Multiple File Options (generated by SERIAL mode)      '
  echo '    -A : set first,last index and stride for multiple files,'
  echo '         the passed argument must be start:end:stride       '
  echo '    -L : only generate the cat list for multiple files      '
  echo     
  echo ' > Defaults :                                            '
  echo '   stems     : all files beginning with O2_TEC, the default '
  echo '               titles of the O2 tecplot writer              '
  echo '   filenames : same as stem                                 '
  echo '   indices   : 1:max_found:1                                '
  echo     
}


if [ -z $1 ];then
 
 helpme
 exit -1
  
fi

overwrite="n"
answer="YES"
report='false'
clean_mode="false"

while getopts 'VhOs:f:p:A:Lvcn' opt; do

case $opt in
    
  s)
   
    stem=$OPTARG
    
    # FILE LISTS
    #    ALL files
    list=(`ls $stem* 2>/dev/null`)
    
    if [ ${#list[@]} -eq 0 ];then
      
      echo "Filename with stem $stem not found"
      exit 1
      
    fi
    
    ;;
    
  f)
    
    filename=$OPTARG
    
    ;;
   
  h)
    
    helpme
    
    ;;
    
  O)
    
    overwrite="y"
    
    ;;
    
  p)
    
    preplot_cmd=$OPTARG
    
    ;;
    
  A)
    
    start_end_stride=${OPTARG[@]}
    
    #echo $start_end_stride
    
    start=`echo $start_end_stride | sed s/:[0-9]*//g`
    end=`echo $start_end_stride | sed s/[0-9]*//`
    stride=`echo $end | sed s/:[0-9]*//`
    end=`echo $end | sed s/:[0-9]*//2g`
    end=`echo $end | sed s/://`
    stride=`echo $stride| sed s/://`
    
    if [ $start -gt $end ];then
      
      echo ' First index should be less than the last index '
      echo ' First index given : ' $start
      echo ' Last  index given : ' $end
      echo ' Stride      given : ' $stride
      
    fi 
    
    if [ -z $stride ] || [ $stride = "0" ]; then
      
      stride="1"
      
    fi
    
    ;;
    
    
  L)
    
    answer="NO"
    
    ;;
    
  v)
    
    report='true'
    
    ;;
   
  c)
    
    clean_mode='true'
    
    ;;
    
  V)
    
    version
    exit
    
    ;;
    
  n)
    
    para_on='true'
    
    ;;
    
  \?)
    
    options
    exit 225
    
esac

done

if [ -z $filename ]; then
 
 filename=$stem

fi

version

if [ -z $preplot_cmd ]; then
 
 preplot_cmd=`which preplot`
 
 if [ -z $preplot_cmd ]; then
    
    echo 
    echo ' ERROR : preplot command not found in path               '
    echo
    echo '         please update path to include preplot or        '
    echo '         set -p option to specify the path to preplot    '
    echo
    echo ' e.g. O2plts -p /my_tecfolder/bin [other options]      '
    echo
    exit 10
    
 fi
 
fi

parallel_cmd=`which parallel`
if [[ -z $parallel_cmd  &&  -n $para_on ]]; then
    
    echo 
    echo ' parallel command not found in path               '
    echo
    echo '         please install parallel                  '
    echo '         if you want to use parallel execution    '
    echo
    echo ' e.g. sudo apt-get install parallel               '
    echo
    
fi

# ===========================
# Generate list of files
# ===========================
# 
# We generate lists of files by separating the as shown in the chart below
# 
#                   =========
#               o-- F I L E S --o 
#              /                 \ 
#        =====/                   \======
#        ASCII                     BINARY
#        /  \                     
# ======/    \=======       
# Single      Multiple    
# File        Files       
#             /    \  
#    ========/      \==========   
#    bySerial        byParallel
#       
#       
# 
# 
# 

# =========================================
# 1. ASCII FILES LISTS 
ascii_list=(`ls $stem*.dat 2>/dev/null`)

#echo ${ascii_list[@]}

if [ ${#ascii_list[@]} -gt 0 ];then
   
    # echo " Ascii Files found " 
    
    # separate ascii files in
    # single file              -> file  like stem.dat                 
    # multiple serial   files  -> files like stem_number.dat
    # multiple parallel files  -> files like stem_number_ranknumber.dat
    
    # COMPLETE ASCII FILE LIST ( all time steps in one file )
    ascii_single=`ls $stem.dat 2>/dev/null`
    
    stemh=$stem'_[1-9]'
    
    # SERIAL SEPERATED ASCII FILES LIST ( time steps on different files )
    ascii_list_multi=(`ls $stemh.dat 2>/dev/null`)
   
    if [ ${#ascii_list_multi[@]} -gt 0 ]; then
     
      add2='[0-9]'
      stemadd2=$stemh$add2
      new_elements=$ascii_list_multi
      
      while [ ${#new_elements[@]} != 0 ];do
        
        # find new elements
        new_elements=(`ls $stemadd2.dat 2>/dev/null`)
        
        # extend list
        ascii_list_multi=("${ascii_list_multi[@]}" "${new_elements[@]}")
        
        # new to obtain more files 
        stemadd2=$stemadd2$add2
        
      done
      
    fi
    
    # PARALLEL SEPERATED ASCII FILES LIST ( time steps on different files )
    ascii_list_multi_para=(`ls $stemh'_rank'*.dat 2>/dev/null`)
    
    if [ ${#ascii_list_multi_para[@]} -gt 0 ]; then
      
      add2='[0-9]'
      stemadd2=$stemh$add2
      new_elements=$ascii_list_multi_para
      
      while [ ${#new_elements[@]} != 0 ];do
        
        new_elements=(`ls $stemadd2'_rank'*.dat 2>/dev/null`)
        
        ascii_list_multi_para=("${ascii_list_multi_para[@]}" "${new_elements[@]}")
        
        stemadd2=$stemadd2$add2
        
      done
     
    fi 
    
    if [ $report = 'true' ]; then
      
      # report findings
      if [ $ascii_single ]; then
        echo
        echo ' > Found ascii file : ' $ascii_single
        echo
      fi
      
      if [ ${#ascii_list_multi[@]} -gt 0 ]; then
        echo
        echo ' > Found multiple ascii files : ' 
        for lmem in ${ascii_list_multi[*]};do
          echo '   ' $lmem
        done
        echo
      fi
      
      if [ ${#ascii_list_multi_para[@]} -gt 0 ]; then
        echo
        echo ' > Found parallel ascii files : '
        for lmem in ${ascii_list_multi_para[*]};do
          echo '   ' $lmem
        done
        echo
      fi
      
  fi
  
else

  echo 
  echo " > ASCII Files not found "
  echo 
  
fi

# =========================================
# 2. BINARY FILES LISTS 
plt_list=(`ls $stem*.plt 2>/dev/null`)

#echo ${plt_list[@]}

if [ ${#plt_list[@]} -gt 0 ];then
  
  # echo " Binary Files found " 
  
  # separate binary files in
  #   -> files like stem_number.dat
  #   -> files like stem_number_ranknumber.dat
  
  stemh=$stem'_head[1-9]'
  
  plt_list_head_para=(`ls $stemh'_rank'*.plt 2>/dev/null`)
  
  if [ ${#plt_list_head_para[@]} -gt 0 ]; then
    
    add2='[0-9]'
    stemadd2=$stemh$add2
    new_elements=$plt_list_head_para
    
    while [ ${#new_elements[@]} != 0 ];do
      
      new_elements=(`ls $stemadd2'_rank'*.plt 2>/dev/null`)
      
      plt_list_head_para=("${plt_list_head_para[@]}" "${new_elements[@]}")
      
      stemadd2=$stemadd2$add2
      
    done
    
  fi
  
  stemh=$stem'_data[1-9]'
  
  plt_list_data_para=(`ls $stemh'_rank'*.plt 2>/dev/null`)
  
  if [ ${#plt_list_data_para[@]} -gt 0 ]; then
    
    add2='[0-9]'
    stemadd2=$stemh$add2
    new_elements=$plt_list_data_para
    
    while [ ${#new_elements[@]} != 0 ];do
      
      new_elements=(`ls $stemadd2'_rank'*.plt 2>/dev/null`)
      
      plt_list_data_para=("${plt_list_data_para[@]}" "${new_elements[@]}")
      
      stemadd2=$stemadd2$add2
      
    done
    
  fi
  
  stemh=$stem'_headm'
  
  plt_list_headm_para=(`ls -v $stemh*'_rank'*.plt 2>/dev/null`)
  
  stemh=$stem'_datam'
  
  plt_list_datam_para=(`ls -v $stemh*'_rank'*.plt 2>/dev/null`)
  
  # report findings
  
  if [ $report = 'true' ]; then
    
    if [ ${#plt_list_head_para[@]} -gt 0 ]; then
      echo
      echo ' > Found plt header file : ' 
      for lmem in ${plt_list_head_para[*]};do
        echo '   ' $lmem
      done
      echo
    fi
    
    if [ ${#plt_list_data_para[@]} -gt 0 ]; then
      echo
      echo ' > Found plt data file : '
      for lmem in ${plt_list_data_para[*]};do
        echo '   ' $lmem
      done
      echo
    fi

  if [ ${#plt_list_headm_para[@]} -gt 0 ]; then
    echo
    echo ' > Found plt header multiple files : ' 
    for lmem in ${plt_list_headm_para[*]};do
    echo $lmem
    done
    echo
  fi

  if [ ${#plt_list_datam_para[@]} -gt 0 ]; then
    echo
    echo ' > Found plt data multiple files : '
    for lmem in ${plt_list_datam_para[*]};do
    echo $lmem
    done
    echo
  fi
  
  fi
  
else
  
  echo 
  echo " > Plt Files not found "
  echo 
  
fi
# =========================================
# 3. START WORK : ASCII FILES
# 
# ASCII files:
# 
#    file set            action
#    --------            ------
#    single file     ->  call preplot
#    multiple files  ->  call preplot recursively
#    parallel files  ->  merge and call preplot

if [ $ascii_single ]; then
  echo 
  echo ' > Single .dat found'
  echo ' > Converting ' $ascii_single '-->' $filename'.plt' 

  if [ $overwrite = "n" ] && [ -f $filename'.plt' ]; then
   
    echo ' file '$filename'.plt'' present, overwrite ? [y/n]'
    read answer
    
    if [ $answer = "y" ]; then
      
      $preplot_cmd $ascii_single $filename'.plt'
      
    fi
    
  else
    
    $preplot_cmd $ascii_single $filename'.plt'
    
  fi
  
fi

#------------------------------------------------------------------------

if [ ${#ascii_list_multi[@]} -gt 0 ]; then
  
  echo 
  echo ' > MULTI .dat found'
  
  if [ -z $start_end_stride ]; then
    
    echo > $filename.catlist
    
    for dat in ${ascii_list_multi[*]}; do
      
      filenames=`echo $dat | sed s/$stem/$filename/g`
      filenames=`echo $filenames | sed s/.dat/.plt/g`
      
      echo $filenames >> $filename.catlist
      
      echo $dat '-->' $filenames
      
      if [ $answer = "NO" ]; then
        
        continue
        
      else
        
        if [[ $overwrite = "n"  &&  -f $filenames ]]; then
        #if [ $overwrite = "n" ] && [ -f $filenames ]; then
          
          echo ' file '$filenames' present, overwrite ? [y/n/exit]    '
          echo '   y    : overwrite file                              '
          echo '   n    : do not overwrite file                       '
          echo '   exit : escape loop                                 '
          read answer
          
          if [ $answer = "y" ]; then
            
            $preplot_cmd $dat $filenames
            
          elif [ $answer = "exit" ]; then
            
            break
            
          fi
          
        else
          
          $preplot_cmd $dat $filenames
         
        fi
        
      fi
      
    done
    
  else
    
    let "i_min=($start-1 < 0)? 0:$start-1"
    let "i_max=($end-1<0)? ${#ascii_list_multi[@]}-1:$end-1"
    let "i_str=$stride"
    
    let "i1=i_min+1"
    let "i2=i_max+1"
    
    ctfile=$filename'_'$i1'_'$i2'_'$i_str.catlist
    
    echo > $ctfile
    
    #echo $i_min
    #echo $i_max
    #echo $i_str
    
    for(( i=i_min; i<=i_max; i+=i_str )); do
      
      dat=${ascii_list_multi[$i]}
      
      filenames=`echo $dat | sed s/$stem/$filename/g`
      filenames=`echo $filenames | sed s/.dat/.plt/g`
      
      echo $filenames >> $ctfile
      
      echo $dat '-->' $filenames
      
      if [ $answer = "NO" ]; then
        
        continue
        
      else
        
        if [ $overwrite = "n" ] && [ -f $filenames ]; then
         
          echo ' file '$filenames' present, overwrite ? [y/n/exit]    '
          echo '   y    : overwrite file                              '
          echo '   n    : do not overwrite file                       '
          echo '   exit : escape loop                                 '
          read answer
          
          if [ $answer = "y" ]; then
            
            $preplot_cmd $dat $filenames
            
          elif [ $answer = "exit" ]; then
            
            break
            
          fi
          
        else
          
          $preplot_cmd $dat $filenames
          
        fi
      fi
    done
    
  fi
  
fi

#------------------------------------------------------------------------

if [ ${#ascii_list_multi_para[@]} -gt 0 ]; then
  
  echo 
  echo ' > PARA MULTI .dat found'
  
  if [ $overwrite = 'n' ] && [ -f $filename.plt ]; then
    
    echo ' file '$filename'.plt present, overwrite ? [y/n]    '
    echo '   y    : overwrite file                            '
    echo '   n    : do not overwrite file                     '
    read answer
    
    if [ $answer = 'y' ]; then
      
      cat ${ascii_list_multi_para[@]} > $filename.dat
      
      $preplot_cmd $filename.dat
      
      rm -f $filename.dat
      
    fi
    
  else
    
    cat ${ascii_list_multi_para[@]} > $filename.dat
    
    $preplot_cmd $filename.dat
    
    rm -f $filename.dat
    
  fi
  
fi

# Plt files
#    serial   files  ->  merge
#    parallel files  ->  merge

#------------------------------------------------------------------------

if [ -f $filename'_head.plt' ] && [ -f $filename'_data.plt' ]; then
    
    echo 
    echo ' > PARA Single .plt found'
    
    if [ -f $filename.plt ]; then
      
      echo ' file '$filename'.plt present, overwrite ? [y/n]    '
      echo '   y    : overwrite file                            '
      echo '   n    : do not overwrite file                     '
      read answer
      
      if [ $answer = 'y' ]; then
        
        cat $filename'_head.plt' $filename'_data.plt' > $filename.plt
        
      fi
      
    else
      
      cat $filename'_head.plt' $filename'_data.plt' > $filename.plt
      
    fi
    
fi

if [ ${#plt_list_head_para[@]} -gt 0 ] && [ ${#plt_list_data_para[@]} -gt 0 ]; then
    
    echo 
    echo ' > PARA Multi .plt found'
    
    if [ -z $start_end_stride ]; then
      
      if [ $overwrite = "n" ] && [ -f $filename.plt ]; then
        
        echo ' file '$filename'.plt present, overwrite ? [y/n]    '
        echo '   y    : overwrite file                            '
        echo '   n    : do not overwrite file                     '
        read answer
        
        if [ $answer = 'y' ]; then
          
          cat ${plt_list_head_para[@]} ${plt_list_data_para[@]} > $filename.plt
          
        fi
        
      else
       
        cat ${plt_list_head_para[@]} ${plt_list_data_para[@]} > $filename.plt
        
      fi
      
    else
      
      let "i_max=($end-1<0)? ${#plt_list_data_para[@]}-1:$end-1"
      
      if [ $overwrite = "n" ] && [ -f $filename.plt ]; then
        
        echo ' file '$filename'.plt present, overwrite ? [y/n]    '
        echo '   y    : overwrite file                            '
        echo '   n    : do not overwrite file                     '
        read answer
        
        if [ $answer = 'y' ]; then
          
          head=${plt_list_head_para[0]}
          
          cat $head > $filename.plt
          
          for(( i=1; i<=i_max; i++ )); do
            
            head=${plt_list_head_para[$i]}
            
            cat $head >> $filename.plt
           
          done
          
          for(( i=0; i<=i_max; i++ )); do
            
            data=${plt_list_data_para[$i]}
            
            cat $data >> $filename.plt
           
          done
          
        fi
        
      else
        
        head=${plt_list_head_para[0]}
        
        cat $head > $filename.plt
        
        for(( i=1; i<=i_max; i++ )); do
          
          head=${plt_list_head_para[$i]}
          
          cat $head >> $filename.plt
         
        done
        
        for(( i=0; i<=i_max; i++ )); do
          
          data=${plt_list_data_para[$i]}
          
          cat $data >> $filename.plt
         
        done
        
      fi
    fi
fi

if [ ${#plt_list_headm_para[@]} -gt 0 ] && [ ${#plt_list_datam_para[@]} -gt 0 ]; then
  
  echo 
  echo ' > Multiple .plt files found'
  
  for ((i=1;i<=${#plt_list_headm_para[@]}-1;i++));do
    
    #echo ${plt_list_headm_para[$i]}
    
    nproc=`echo ${plt_list_headm_para[$i]} | sed s/$stem//g`
    nproc=`echo $nproc | sed s/_headm[0-9]*_//g`
    nproc=`echo $nproc | sed s/rank//`
    nproc=`echo $nproc | sed s/.plt//`
    
    #echo $nproc
    
    if [ $nproc -lt $i ]; then
      break
    fi
    
    last_proc=$nproc
    
  done
  
  let "nproc=last_proc+1"
  
  echo " Found files from $nproc processors "
  
  if [ -z $start_end_stride ]; then
    
    let "i_min=0"
    let "i_max=${#plt_list_headm_para[@]}-1"
    let "i_str=1"
   
    ctfile=$filename.catlist
    
  else
    
    let "i_min=($start-1 < 0)? 0:$start-1"
    let "i_max=(($end-1)*$nproc<0)? ${#plt_list_headm_para[@]}-1:$end-1"
    let "i_str=$stride"
    
    let "i1=i_min+1"
    let "i2=i_max+1"
   
    ctfile=$filename'_'$i1'_'$i2'_'$i_str.catlist
    
  fi 
  
  echo > $ctfile
  
  for(( i=i_min*nproc; i<=i_max; i+=i_str*nproc )); do
    
    dat=${plt_list_headm_para[$i]}
    
    filenames=`echo $dat | sed s/$stem/$filename/g`
    filenames=`echo $filenames | sed s/_headm//`
    filenames=`echo $filenames | sed s/_rank[0-9]*//g`
    
    echo $filenames >> $ctfile
    
    if [ $answer = "NO" ]; then
      
      continue
      
    else
      
      if [ $overwrite = "n" ] && [ -f $filenames ]; then
       
        if [ -z $stickn ];then
        echo ' file '$filenames' present, overwrite ? [y/n/exit]    '
        echo '   y    : overwrite file                              '
        echo '   n    : do not overwrite file                       '
        echo '  nnn   : skip files if present                       '
        echo '  exit  : escape loop                                 '
        read answer
        else
        answer="n"
        fi
        
        if [ $answer = "y" ]; then
          
          cat ${plt_list_headm_para[@]:$i:$nproc} ${plt_list_datam_para[@]:$i:$nproc} > $filenames
         
        elif [ $answer = "exit" ]; then
          
          break
          
        elif [ $answer = "nnn" ]; then
          
          stickn=$answer
          
        fi
        
      else
        
        cat ${plt_list_headm_para[@]:$i:$nproc} ${plt_list_datam_para[@]:$i:$nproc} > $filenames
        
      fi
    fi
  done
  
fi

echo " Done "
  
exit 0